pipeline {
    agent any

    environment {
        // Define Dagger cache location
        DAGGER_CACHE_DIR = '/tmp/dagger_cache'
    }

    tools {
        maven "maven3.9.9"
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3')
        timestamps()
    }

    parameters {
        choice choices: ['master', 'development', 'qa'], description: 'Select branch', name: 'branchName'
    }

    stages {
        stage('Setup Dagger CLI') {
            steps {
                script {
                    // Ensure Dagger CLI is installed
                    sh 'curl -fsSL https://github.com/dagger/dagger/releases/download/v0.16.1/dagger-linux-amd64 -o /usr/local/bin/dagger'
                    sh 'chmod +x /usr/local/bin/dagger'
                }
            }
        }

        stage('Git Checkout') {
            steps {
                script {
                    // Clone the repository using Dagger
                    sh 'dagger run gitCheckout'
                }
            }
        }

        stage('Maven Build with Caching') {
            steps {
                script {
                    // Run the Maven build using Dagger with distributed caching
                    sh 'dagger run mavenBuild'
                }
            }
        }

        stage('SonarQube Scan') {
            steps {
                script {
                    // Run SonarQube scan using Dagger
                    sh 'dagger run sonarScan'
                }
            }
        }

        stage('Nexus Deployment') {
            steps {
                script {
                    // Deploy to Nexus using Dagger
                    sh 'dagger run nexusDeploy'
                }
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                script {
                    // Deploy WAR file to Tomcat server using SCP
                    sh 'dagger run tomcatDeploy'
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline execution failed!"
        }
    }
}
